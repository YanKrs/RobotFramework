<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="PywinautoLibrary" type="library" format="ROBOT" generated="20200218 09:19:17">
<version></version>
<scope>test case</scope>
<namedargs>yes</namedargs>
<doc>Documentation for library ``PywinautoLibrary``.</doc>
<kw name="Click">
<arguments>
<arg>control</arg>
</arguments>
<doc>Send a click event to a control.

This method sends WM_* messages to the control, to do a more 'realistic' mouse click use "win Real Click"
which uses SendInput() API to perform the click. This method does not require that the control be visible on
the screen (i.e. is can be hidden beneath another window and it will still work.)</doc>
<tags>
</tags>
</kw>
<kw name="Click Toolbar Button">
<arguments>
<arg>control</arg>
<arg>text</arg>
</arguments>
<doc>Given the text of a button on the specified toolbar control, press that button
Not 100% sure this works. It's an undocumented feature in the pywinauto library...</doc>
<tags>
</tags>
</kw>
<kw name="Click Tree Element">
<arguments>
<arg>control</arg>
<arg>path</arg>
</arguments>
<doc>Click a treeview control element by the path within the tree.
The path should take the same form as a menu, where -&gt; delimits the nodes.
For example "Tree-&gt;Node2-&gt;Subnode1" would specify Subnode1 on the tree below

+ Tree
----+ Node1
----+ Node2
--------+ Subnode1
----+ Node3
--------+ Subnode2</doc>
<tags>
</tags>
</kw>
<kw name="Close Application">
<arguments>
</arguments>
<doc>Close the application in context</doc>
<tags>
</tags>
</kw>
<kw name="Close Window">
<arguments>
</arguments>
<doc>Close the selected dialog</doc>
<tags>
</tags>
</kw>
<kw name="Combo Box Select Index">
<arguments>
<arg>control</arg>
<arg>value</arg>
</arguments>
<doc>Select an item in the combo box. Value is an integer to the index of the item in the combo box.</doc>
<tags>
</tags>
</kw>
<kw name="Combo Box Select Value">
<arguments>
<arg>control</arg>
<arg>value</arg>
</arguments>
<doc>Select an item in the combo box. Value is a string with the exact text of the item to select in the combo box.</doc>
<tags>
</tags>
</kw>
<kw name="Control Has Focus">
<arguments>
<arg>control</arg>
</arguments>
<doc>### NOT COMPLETE - DO NOT USE ###
Assert that the specified control has focus.</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Active">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a control on the current dialog, assert that it is visible and enabled. If not, throw an error.</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Button">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is a button</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Check Box">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is a check box</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Checked">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is checked (checkbox, radio, etc.)</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Enabled">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a control on the current dialog, assert that it is enabled. If not, throw an error.</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Group Box">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is a check box</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Indeterminate">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is in an indeterminate state (checkbox is partially checked)</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Radio Button">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is a check box</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Un Checked">
<arguments>
<arg>control</arg>
</arguments>
<doc>Assert that the specified control is unchecked (checkbox, radio, etc.)</doc>
<tags>
</tags>
</kw>
<kw name="Control Is Visible">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a control on the current dialog, assert that it is visible. If not, throw an error.</doc>
<tags>
</tags>
</kw>
<kw name="Disconnect From Application">
<arguments>
</arguments>
<doc>Remove the current reference to an application and dialog.</doc>
<tags>
</tags>
</kw>
<kw name="Double Click">
<arguments>
<arg>control</arg>
</arguments>
<doc>Send a double click event to a control.

This method sends WM_* messages to the control, to do a more 'realistic' mouse click use "win Real Double Click" which uses SendInput() API to perform the click.
This method does not require that the control be visible on the screen (i.e. is can be hidden beneath another window and it will still work.)</doc>
<tags>
</tags>
</kw>
<kw name="Double Click Tree Element">
<arguments>
<arg>control</arg>
<arg>path</arg>
</arguments>
<doc>Double Click a treeview control element by the path within the tree.
The path should take the same form as a menu, where -&gt; delimits the nodes.
For example "Tree-&gt;Node2-&gt;Subnode1" would specify Subnode1 on the tree below

+ Tree
----+ Node1
----+ Node2
--------+ Subnode1
----+ Node3
--------+ Subnode2</doc>
<tags>
</tags>
</kw>
<kw name="Drag Mouse">
<arguments>
<arg>control</arg>
<arg>press_x</arg>
<arg>press_y</arg>
<arg>release_x</arg>
<arg>release_y</arg>
<arg>button=left</arg>
</arguments>
<doc>Press, move and release the mouse button specified by "button" (left by default).
The coordinates to press the mouse button at are x and y for "press_x" and "press_y" respectively.
The coordinates to release the mouse button at are x and y for "release_x" and "release_y" respectively.</doc>
<tags>
</tags>
</kw>
<kw name="Expand Tree Element">
<arguments>
<arg>control</arg>
<arg>path</arg>
</arguments>
<doc>Expand a treeview control element by the path within the tree.
The path should take the same form as a menu, where -&gt; delimits the nodes.
For example "Tree-&gt;Node2-&gt;Subnode1" would specify Subnode1 on the tree below

+ Tree
----+ Node1
----+ Node2
--------+ Subnode1
----+ Node3
--------+ Subnode2</doc>
<tags>
</tags>
</kw>
<kw name="Get All Tab Texts">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Given a tab control, return the text associated with all tabs in that control, in a pipe delimited string</doc>
<tags>
</tags>
</kw>
<kw name="Get Combo Box Item Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get a count of the items in a combo box</doc>
<tags>
</tags>
</kw>
<kw name="Get Combo Box Items">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a control name in the current dialog, pull a pipe delimited string of all the valid items in that combo box.</doc>
<tags>
</tags>
</kw>
<kw name="Get Combo Box Selected Index">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get the selected index of a combo box</doc>
<tags>
</tags>
</kw>
<kw name="Get Combo Box Selected Value">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get the selected value's text of a combo box</doc>
<tags>
</tags>
</kw>
<kw name="Get Control Text">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get the text contained within a control on the current dialog.</doc>
<tags>
</tags>
</kw>
<kw name="Get Dialog">
<arguments>
<arg>title</arg>
</arguments>
<doc>Given an exact title, set the dialog matching it (in the current application) to the current context.
If no application is selected currently, attempt to match both the application and dialog to this title.</doc>
<tags>
</tags>
</kw>
<kw name="Get Dialog From Regex">
<arguments>
<arg>regex</arg>
</arguments>
<doc>Given a regex, set the dialog who's title matches (in the current application) to the current context.</doc>
<tags>
</tags>
</kw>
<kw name="Get Edit Box Line Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given an edit box control on the current dialog, return the number of lines in the edit box.</doc>
<tags>
</tags>
</kw>
<kw name="Get Edit Box Line Text">
<arguments>
<arg>control</arg>
<arg>line_index</arg>
</arguments>
<doc>Given an edit box control on the current dialog, and an int for the index of a line in that edit box, return that line's text.
If you give this a line that doesn't exist, it returns an empty string.</doc>
<tags>
</tags>
</kw>
<kw name="Get Edit Box Text">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given an edit box control on the current dialog, return the text for that control.</doc>
<tags>
</tags>
</kw>
<kw name="Get Existing Application">
<arguments>
<arg>titleRegex</arg>
</arguments>
<doc>Given a regex that indicates the window's title text, set the window as the current context.</doc>
<tags>
</tags>
</kw>
<kw name="Get List Box Item Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get a count of the items in a list box</doc>
<tags>
</tags>
</kw>
<kw name="Get List Box Items">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a control name in the current dialog, pull a pipe delimited string of all the valid items in that list box.</doc>
<tags>
</tags>
</kw>
<kw name="Get List Box Selected Index">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get the selected indices of a list box. Returns a pipe delimited list of the index of each selected item.</doc>
<tags>
</tags>
</kw>
<kw name="Get List Box Selected Value">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get the selected value's text from a list box. Returns a pipe delimited list of the text of each selected item.</doc>
<tags>
</tags>
</kw>
<kw name="Get List View Column Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get a count of the columns in a listview control</doc>
<tags>
</tags>
</kw>
<kw name="Get List View Item Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get a count of the items in a listview control</doc>
<tags>
</tags>
</kw>
<kw name="Get Number Of Children">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a control on the current dialog, return the number of children of that control.
IE, in a combo box, return the number of options. In a tab set, return the number of tabs.</doc>
<tags>
</tags>
</kw>
<kw name="Get Selected Tab Index">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a tab control, return the index of the selected tab.</doc>
<tags>
</tags>
</kw>
<kw name="Get Status Bar Part Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Return the number of "parts" associated with a status bar on the current dialog</doc>
<tags>
</tags>
</kw>
<kw name="Get Status Bar Part Text">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Given a status bar control, and the index of the part in that status bar, return the text contained</doc>
<tags>
</tags>
</kw>
<kw name="Get Status Bar Text">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a status bar control, return the text contained in it's parts, in a pipe delimited string.</doc>
<tags>
</tags>
</kw>
<kw name="Get Tab Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a tab control, return the number of tabs in that control.</doc>
<tags>
</tags>
</kw>
<kw name="Get Tab Text">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Given a tab control, and an index, return the text associated with the tab specified by the index</doc>
<tags>
</tags>
</kw>
<kw name="Get Toolbar Button Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a toolbar control, return the number of buttons on the toolbar</doc>
<tags>
</tags>
</kw>
<kw name="Get Toolbar Button Text">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Given an index of a button on the specified toolbar control, return the button's text</doc>
<tags>
</tags>
</kw>
<kw name="Get Tree Text">
<arguments>
<arg>control</arg>
</arguments>
<doc>Return all text for a tree in a pipe delimited string</doc>
<tags>
</tags>
</kw>
<kw name="Get Window Text">
<arguments>
</arguments>
<doc>Get the text of the currently selected dialog.
Quite a few controls have other text that is visible, for example Edit controls usually have an empty string for WindowText
but still have text displayed in the edit window.</doc>
<tags>
</tags>
</kw>
<kw name="List Box Deselect All">
<arguments>
<arg>control</arg>
</arguments>
<doc>Deselect all currently selected items in a list box.
Not 100% sure this works. Please test and let me know either way.</doc>
<tags>
</tags>
</kw>
<kw name="List Box Select Index">
<arguments>
<arg>control</arg>
<arg>value</arg>
</arguments>
<doc>Select an item in the list box. Value is an integer to the index of the item in the list box.</doc>
<tags>
</tags>
</kw>
<kw name="List Box Select Value">
<arguments>
<arg>control</arg>
<arg>value</arg>
</arguments>
<doc>Select an item in the list box. Value is a string with the exact text of the item to select in the list box.</doc>
<tags>
</tags>
</kw>
<kw name="List View Check Index">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Check an item specified by the index.</doc>
<tags>
</tags>
</kw>
<kw name="List View Deselect Index">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Deselect an item specified by the index.</doc>
<tags>
</tags>
</kw>
<kw name="List View Get Selected Count">
<arguments>
<arg>control</arg>
</arguments>
<doc>Get the number of selected items in the listview</doc>
<tags>
</tags>
</kw>
<kw name="List View Header Text">
<arguments>
<arg>control</arg>
</arguments>
<doc>Given a listview control, return a pipe delimited list of the header text associated with the columns</doc>
<tags>
</tags>
</kw>
<kw name="List View Index Is Checked">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Assert that the item specified by the index is checked</doc>
<tags>
</tags>
</kw>
<kw name="List View Index Is Not Checked">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Assert that the item specified by the index is not checked</doc>
<tags>
</tags>
</kw>
<kw name="List View Index Is Not Selected">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Assert that the item specified by the index is not selected</doc>
<tags>
</tags>
</kw>
<kw name="List View Index Is Selected">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Assert that the item specified by the index is selected</doc>
<tags>
</tags>
</kw>
<kw name="List View Select Index">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Select an item specified by the index.</doc>
<tags>
</tags>
</kw>
<kw name="List View Uncheck Index">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Uncheck an item specified by the index.</doc>
<tags>
</tags>
</kw>
<kw name="Maximize Window">
<arguments>
</arguments>
<doc>Maximize the selected dialog</doc>
<tags>
</tags>
</kw>
<kw name="Menu Select">
<arguments>
<arg>menulocation</arg>
</arguments>
<doc>Given a menu location, select that menu item. The menu location should be given in this form: "Edit -&gt;
Replace" or "File -&gt; Save As" Spaces are not important in this form, so "File-&gt;SaveAs" is also acceptable.</doc>
<tags>
</tags>
</kw>
<kw name="Minimize Window">
<arguments>
</arguments>
<doc>Maximize the selected dialog</doc>
<tags>
</tags>
</kw>
<kw name="Outline Dialog">
<arguments>
</arguments>
<doc>Draw an outline around the current dialog</doc>
<tags>
</tags>
</kw>
<kw name="Popup Menu Select">
<arguments>
<arg>menulocation</arg>
</arguments>
<doc>Given a popup menu option, select that menu item. The menu location should be given in this form: "Edit -&gt; Replace" or "File -&gt; Save As"
Spaces are not important in this form, so "File-&gt;SaveAs" is also acceptable.</doc>
<tags>
</tags>
</kw>
<kw name="Real Click">
<arguments>
<arg>control</arg>
</arguments>
<doc>Move the mouse to the specified control, and click on it. DON'T MOVE THE MOUSE while using this action.

This is different from Click in that it requires the control to be visible on the screen but performs a more realistic 'click' simulation.
This method is also vulnerable if the mouse if moved by the user as that could easily move the mouse off the control before the Click has finished.</doc>
<tags>
</tags>
</kw>
<kw name="Real Double Click">
<arguments>
<arg>control</arg>
</arguments>
<doc>Move the mouse to the specified control, and double click on it. DON'T MOVE THE MOUSE while using this action.

This is different from Double Click in that it requires the control to be visible on the screen but performs a more realistic 'doubleclick' simulation.
This method is also vulnerable if the mouse if moved by the user as that could easily move the mouse off the control before the doubleclick has finished.</doc>
<tags>
</tags>
</kw>
<kw name="Real Right Click">
<arguments>
<arg>control</arg>
</arguments>
<doc>Move the mouse to the specified control, and right click on it. DON'T MOVE THE MOUSE while using this action.

This is different from Right Click in that it requires the control to be visible on the screen but performs a more realistic 'right click' simulation.
This method is also vulnerable if the mouse if moved by the user as that could easily move the mouse off the control before the right click has finished.</doc>
<tags>
</tags>
</kw>
<kw name="Restore Window">
<arguments>
</arguments>
<doc>Maximize the selected dialog</doc>
<tags>
</tags>
</kw>
<kw name="Right Click">
<arguments>
<arg>control</arg>
</arguments>
<doc>Send a right click event to a control.

This method sends WM_* messages to the control, to do a more 'realistic' mouse click use "win Real Right Click" which uses SendInput() API to perform the click.
This method does not require that the control be visible on the screen (i.e. is can be hidden beneath another window and it will still work.)</doc>
<tags>
</tags>
</kw>
<kw name="Right Click Tree Element">
<arguments>
<arg>control</arg>
<arg>path</arg>
</arguments>
<doc>Right Click a treeview control element by the path within the tree.
The path should take the same form as a menu, where -&gt; delimits the nodes.
For example "Tree-&gt;Node2-&gt;Subnode1" would specify Subnode1 on the tree below

+ Tree
----+ Node1
----+ Node2
--------+ Subnode1
----+ Node3
--------+ Subnode2</doc>
<tags>
</tags>
</kw>
<kw name="Scroll">
<arguments>
<arg>control</arg>
<arg>direction</arg>
<arg>amount</arg>
<arg>count=1</arg>
</arguments>
<doc>direction can be any of "up", "down", "left", "right"
amount can be one of "line", "page", "end"
count (optional) the number of times to scroll</doc>
<tags>
</tags>
</kw>
<kw name="Select Tab By Index">
<arguments>
<arg>control</arg>
<arg>index</arg>
</arguments>
<doc>Given a tab control, and the text of a tab in it, select that tab.</doc>
<tags>
</tags>
</kw>
<kw name="Select Tab By Text">
<arguments>
<arg>control</arg>
<arg>text</arg>
</arguments>
<doc>Given a tab control, and the text of a tab in it, select that tab.</doc>
<tags>
</tags>
</kw>
<kw name="Set Checkbox To Checked">
<arguments>
<arg>control</arg>
</arguments>
<doc>Set the specified checkbox's state to checked.</doc>
<tags>
</tags>
</kw>
<kw name="Set Checkbox To Indeterminate">
<arguments>
<arg>control</arg>
</arguments>
<doc>Set the specified checkbox's state to unchecked.</doc>
<tags>
</tags>
</kw>
<kw name="Set Checkbox To Un Checked">
<arguments>
<arg>control</arg>
</arguments>
<doc>Set the specified checkbox's state to unchecked.</doc>
<tags>
</tags>
</kw>
<kw name="Set Edit Box Text">
<arguments>
<arg>control</arg>
<arg>textblock</arg>
</arguments>
<doc>Given an edit box control on the current dialog, and a block of text, set the block to the text for that control.
As this is windows vs linux, \n won't represent a newline. \r\n is needed to represent a newline. This differs from sendkeys
because you are setting the control text directly vs typing it.</doc>
<tags>
</tags>
</kw>
<kw name="Set Focus">
<arguments>
<arg>control</arg>
</arguments>
<doc>Sets the current focus to the specified control.
This will bring the window to the foreground if neccesary.</doc>
<tags>
</tags>
</kw>
<kw name="Set Timeout">
<arguments>
<arg>timeout_type</arg>
<arg>new_timeout_time</arg>
</arguments>
<doc>Set the timeout value to something other than the defaults. Below are the acceptable timeout types, and thier associated timeout defaults.

Also acceptable are the timeout type of "default" and the timeout time of "fast", "slow" or "default". These are predefined timeout templates.

* window_find_timeout (default 3)
* window_find_retry (default .09)
* app_start_timeout (default 10)
* app_start_retry (default .90)
* exists_timeout (default .5)
* exists_retry (default .3)
* after_click_wait (default .09)
* after_clickinput_wait (default .01)
* after_menu_wait (default .05)
* after_sendkeys_key_wait (default .01)
* after_button_click_wait (default 0)
* before_closeclick_wait (default .1)
* closeclick_retry (default .05)
* closeclick_dialog_close_wait (default .05)
* after_closeclick_wait (default .2)
* after_windowclose_timeout (default 2)
* after_windowclose_retry (default .5)
* after_setfocus_wait (default .06)
* after_setcursorpos_wait (default .01)
* sendmessagetimeout_timeout (default .001)
* after_tabselect_wait (default .01)
* after_listviewselect_wait (default .01)
* after_listviewcheck_wait default(.001)
* after_treeviewselect_wait default(.001)
* after_toobarpressbutton_wait default(.01)
* after_updownchange_wait default(.001)
* after_movewindow_wait default(0)
* after_buttoncheck_wait default(0)
* after_comboselect_wait default(0)
* after_listboxselect_wait default(0)
* after_listboxfocuschange_wait default(0)
* after_editsetedittext_wait default(0)
* after_editselect_wait default(0)</doc>
<tags>
</tags>
</kw>
<kw name="Set Window Focus">
<arguments>
</arguments>
<doc>Sets the current focus to the currently selected window.
This will bring the window to the foreground if neccesary.</doc>
<tags>
</tags>
</kw>
<kw name="Start Application">
<arguments>
<arg>startCommand</arg>
</arguments>
<doc>Given a command, execute it and return the identifier for the window it started.</doc>
<tags>
</tags>
</kw>
<kw name="Type Keys">
<arguments>
<arg>control</arg>
<arg>keys</arg>
</arguments>
<doc>Type keyboard keys into the control.

For how to do special characters, and other functionality above and beyond, check the sendkeys module in python.
http://www.rutherfurd.net/python/sendkeys/
The parameters for sendkeys used are: (pause=0.05, with_spaces=True, with_tabs=True, with_newlines=True, turn_off_numlock=True)</doc>
<tags>
</tags>
</kw>
</keywordspec>
